use std::str::FromStr;

grammar;

Sum: f32 = {
    <s:Sum> "+" <p:Product> => s + p,
    <s:Sum> "-" <p:Product> => s - p,
    <p:Product> => p,
};

Product: f32 = {
    <p:Product> "*" <t:Expr> => p * t,
    <p:Product> "/" <t:Expr> => p / t,
    <t:Expr> => t,
};

Args = Comma<Sum>; // (0)

Comma<T>: Vec<f32> = { // (1)
    <mut v:(<T> ",")*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

pub Expr: f32 = {
    <n:Num> => n,
    "(" <t:Sum> ")" => t,
    "Average" "(" <a:Args> ")" => { let sum:f32 = a.iter().sum(); sum / a.len() as f32 }
};

match {
    r"-?[0-9.]+" => NUM,
} else {
    r"\w+" => ID,
    _
}

Num: f32 = <s:NUM> => f32::from_str(s).unwrap();

Identifier: String = <s:ID> => s.to_string();
