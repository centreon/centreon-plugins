use std::str::FromStr;
use compute::lexer;

grammar;

pub Expr: f32 = {
    <s:Expr> "+" <p:Product> => s + p,
    <s:Expr> "-" <p:Product> => s - p,
    <p:Product> => p,
};

pub Product: f32 = {
    <s:Product> "*" <v:Term> => s * v,
    <s:Product> "/" <v:Term> => s / v,
    <v:Term> => v,
};

pub Term: f32 = {
    "num" => <>,
    "(" <v:Expr> ")" => v,
};

extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    // ...

    enum lexer::Tok {
	"*" => lexer::Tok::OpStar,
	"/" => lexer::Tok::OpSlash,
	"+" => lexer::Tok::OpPlus,
	"-" => lexer::Tok::OpMinus,
	"(" => lexer::Tok::LParen,
	")" => lexer::Tok::RParen,
	"num" => lexer::Tok::Num(<f32>)
    }
}
