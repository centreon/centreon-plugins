name: perl-cpan-libraries

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  pull_request:
    paths:
      - ".github/workflows/perl-cpan-libraries.yml"
  push:
    branches:
      - develop
      - dev-[2-9][0-9].[0-9][0-9].x
      - master
      - "[2-9][0-9].[0-9][0-9].x"
    paths:
      - ".github/workflows/perl-cpan-libraries.yml"

jobs:
  get-environment:
    uses: ./.github/workflows/get-environment.yml

  package-rpm:
    needs: [get-environment]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      needs.get-environment.outputs.stability != 'stable'

    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        distrib: [el8, el9]
        name:
          [
            "Net::NTP",
          ]
        include:
          - build_distribs: "el8,el9"
          - rpm_dependencies: ""
          - rpm_provides: ""
          - version: ""
          - spec_file: ""
          - no-auto-depends: "false"
          - preinstall_cpanlibs: ""
          - revision: "1"
          - distrib: el8
            package_extension: rpm
            image: packaging-plugins-alma8
          - distrib: el9
            package_extension: rpm
            image: packaging-plugins-alma9

    name: package ${{ matrix.distrib }} ${{ matrix.name }}
    container:
      image: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{ matrix.image }}:latest
      credentials:
        username: ${{ secrets.HARBOR_CENTREON_PULL_USERNAME }}
        password: ${{ secrets.HARBOR_CENTREON_PULL_TOKEN }}

    steps:
      - if: ${{ contains(matrix.build_distribs, matrix.distrib) }}
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - if: ${{ contains(matrix.build_distribs, matrix.distrib) }}
        name: Get package infos
        id: package-infos
        run: |
          cpan_info=$(cpanm --info ${{ matrix.name }})
          if [ -z "${{ matrix.version }}" ]; then
            CPAN_PACKAGE_VERSION=$(echo $cpan_info | sed 's/\.tar\.gz$//' | sed 's/.*\-//')
            if [[ ! $CPAN_PACKAGE_VERSION =~ ^[v0-9]+\.[0-9]+ ]]; then
              echo "::error::Invalid version number: ${CPAN_PACKAGE_VERSION}"
              exit 1
            fi
            PACKAGE_VERSION="${CPAN_PACKAGE_VERSION}"
          else
            PACKAGE_VERSION="${{ matrix.version }}"
          fi
          echo "package_version=$(echo $PACKAGE_VERSION)" >> $GITHUB_OUTPUT
          CPAN_PACKAGE_NAME=$(echo $cpan_info | sed 's/.*\///g' | sed 's/-[0-9\.]*\.tar\.gz//g')
          PACKAGE_NAME="perl-$CPAN_PACKAGE_NAME"
          echo "package_name=$(echo $PACKAGE_NAME)" >> $GITHUB_OUTPUT
        shell: bash

      - if: ${{ contains(matrix.build_distribs, matrix.distrib) }}
        name: Check if package already exists
        id: check-package-existence
        run: |
          package_info=$(dnf provides 'perl(${{ matrix.name }})' 2>&1 | tr '[:upper:]' '[:lower:]' || true)
          do_not_build="false"
          if [[ ! $package_info =~ "no matches found" ]]; then
            package_version=$(echo $package_info | grep -oP "perl\($(echo ${{ matrix.name }} | tr '[:upper:]' '[:lower:]')\) = \K[0-9]+\.[0-9]+")
            if [[ "$package_version" == "${{ steps.package-infos.outputs.package_version }}" || "v$package_version" == "${{ steps.package-infos.outputs.package_version }}" ]]; then
              echo "::warning::Package ${{ matrix.name }} already exists in the official ${{ matrix.distrib }} repository with the same version."
              do_not_build="true"
            else
              echo "::warning::Package ${{ matrix.name }} exists in the official ${{ matrix.distrib }} repository with a different version."
              do_not_build="false"
            fi
          fi
          echo "do_not_build=$do_not_build" >> $GITHUB_OUTPUT
        shell: bash

      - if: ${{ steps.check-package-existence.outputs.do_not_build == 'false' && contains(matrix.build_distribs, matrix.distrib) && matrix.spec_file == '' }}
        run: |
          PACKAGE_VERSION=" -v ${{ steps.package-infos.outputs.package_version }}"

          if [ -z "${{ matrix.rpm_dependencies }}" ]; then
            PACKAGE_DEPENDENCIES=""
          else
            for PACKAGE_DEPENDENCY in `echo "${{ matrix.rpm_dependencies }}"`; do
              PACKAGE_DEPENDENCIES="$PACKAGE_DEPENDENCIES --depends "$PACKAGE_DEPENDENCY""
            done
          fi

          if [ "${{ matrix.no-auto-depends }}" == "true" ]; then
            PACKAGE_DEPENDENCIES="$PACKAGE_DEPENDENCIES --no-auto-depends"
          fi

          if [ -z "${{ matrix.rpm_provides }}" ]; then
            PACKAGE_PROVIDES=""
          else
            for PACKAGE_PROVIDE in `echo "${{ matrix.rpm_provides }}"`; do
              PACKAGE_PROVIDES="$PACKAGE_PROVIDES --provides $PACKAGE_PROVIDE"
            done
          fi

          for CPANLIB_PREINSTALL in `echo "${{ matrix.preinstall_cpanlibs }}"`; do
            cpanm $CPANLIB_PREINSTALL
          done

          export SYBASE="/usr"

          temp_file=$(mktemp)
          echo "default.local" | tee /etc/mailname
          created_package=$(fpm -s cpan -t ${{ matrix.package_extension }} --rpm-dist ${{ matrix.distrib }} --verbose --cpan-verbose --no-cpan-test$PACKAGE_DEPENDENCIES$PACKAGE_PROVIDES$PACKAGE_VERSION --iteration ${{ matrix.revision }} ${{ matrix.name }} | tee "$temp_file" | grep "Created package" | grep -oP '(?<=:path=>").*?(?=")')
          # Check package name
          if [ -z "$created_package" ]; then
            echo "Error: fpm command failed"
            exit 1
          fi
          # Check rpm
          rpm2cpio $created_package | cpio -t
        shell: bash

      - if: ${{ steps.check-package-existence.outputs.do_not_build == 'false' && contains(matrix.build_distribs, matrix.distrib) && matrix.spec_file != '' }}
        run: |
          mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}

          rpmbuild --undefine=_disable_source_fetch -ba ${{ matrix.spec_file }}

          cp -r ~/rpmbuild/RPMS/noarch/*.rpm .
        shell: bash

      - if: ${{ steps.check-package-existence.outputs.do_not_build == 'false' && contains(matrix.build_distribs, matrix.distrib) }}
        name: Replace '::' with - in the feature path
        id: package-name
        run: |
          name="${{ matrix.name }}"
          name_with_dash="${name//::/-}"
          echo "Modified Name: $name_with_dash"
          echo "name_with_dash=$name_with_dash" >> $GITHUB_OUTPUT
        shell: bash

      - if: ${{ steps.check-package-existence.outputs.do_not_build == 'false' && contains(matrix.build_distribs, matrix.distrib) }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: packages-${{ matrix.package_extension }}-${{ matrix.distrib }}-${{ steps.package-name.outputs.name_with_dash }}
          path: ./*.${{ matrix.package_extension }}
          retention-days: 1

  merge-package-rpm-artifacts:
    needs: [get-environment, package-rpm]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      needs.get-environment.outputs.stability != 'stable'
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        distrib: [el8, el9]

    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: packages-rpm-${{ matrix.distrib }}
          pattern: packages-rpm-${{ matrix.distrib }}-*
          delete-merged: false # cannot be set to true due to random fails: Failed to DeleteArtifact: Unable to make request: ECONNRESET
          retention-days: 1

      - name: Delete merged artifacts
        uses: geekyeggo/delete-artifact@f275313e70c08f6120db482d7a6b98377786765b # v5.1.0
        with:
          name: packages-rpm-${{ matrix.distrib }}-*
          failOnError: false

  sign-rpm:
    needs: [get-environment, merge-package-rpm-artifacts]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      needs.get-environment.outputs.stability != 'stable'

    runs-on: ubuntu-24.04
    strategy:
      matrix:
        distrib: [el8, el9]
    name: sign rpm ${{ matrix.distrib }}
    container:
      image: docker.centreon.com/centreon-private/rpm-signing:20250918
      options: -t
      credentials:
        username: ${{ secrets.HARBOR_RPM_GPG_SIGNING_REPO_USERNAME }}
        password: ${{ secrets.HARBOR_RPM_GPG_SIGNING_REPO_TOKEN }}

    steps:
      - run: apt-get install -y zstd
        shell: bash

      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: packages-rpm-${{ matrix.distrib }}
          path: ./

      - run: echo "HOME=/root" >> $GITHUB_ENV
        shell: bash

      - run: rpmsign --addsign ./*.rpm
        shell: bash

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: perl-net-ntp-rpm-${{ matrix.distrib }}
          path: ./*.rpm
          retention-days: 1

      - uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ./*.rpm
          key: ${{ github.sha }}-${{ github.run_id }}-rpm-${{ matrix.distrib }}
