on:
  workflow_call:
    inputs:
      version_file:
        required: true
        type: string
    outputs:
      major_version:
        description: "major version"
        value: ${{ jobs.get-version.outputs.major_version }}
      minor_version:
        description: "minor version"
        value: ${{ jobs.get-version.outputs.minor_version }}
      release:
        description: "release"
        value: ${{ jobs.get-version.outputs.release }}
      stability:
        description: "branch stability (stable, testing, unstable, canary)"
        value: ${{ jobs.get-version.outputs.stability }}
      environment:
        description: "environment deployed"
        value: ${{ jobs.get-version.outputs.environment }}
      dockerize_matrix:
        description: "matrix to use for dockerize job"
        value: ${{ jobs.get-version.outputs.dockerize_matrix }}
jobs:
  get-version:
    runs-on: ubuntu-22.04
    outputs:
      major_version: ${{ steps.get_version.outputs.major_version }}
      minor_version: ${{ steps.get_version.outputs.minor_version }}
      release: ${{ steps.get_version.outputs.release }}
      stability: ${{ steps.get_version.outputs.stability }}
      environment: ${{ steps.get_version.outputs.env }}
      dockerize_matrix: ${{ steps.get_version.outputs.dockerize_matrix }}

    steps:
      - uses: actions/checkout@v4

      - uses: shivammathur/setup-php@v2
        if: ${{ endsWith(inputs.version_file, '.php') }}
        with:
          php-version: 8.1
          extensions: none
          tools: none

      - id: get_version
        run: |
          if [[ "${{ inputs.version_file }}" == */.version ]]; then
            . .version
            . ${{ inputs.version_file }}
            VERSION="$MAJOR.$MINOR"
          elif [[ "${{ inputs.version_file }}" == */insertBaseConf.sql ]]; then
            VERSION=`grep version ${{ inputs.version_file }} | cut -d "'" -f 4 | awk 'NR==2'`
          elif [[ "${{ inputs.version_file }}" == */conf.php ]]; then
            VERSION=`echo 'var_export($module_conf);' | cat ${{ inputs.version_file }} - | php | grep mod_release | cut -d "'" -f 4`
          elif [[ "${{ inputs.version_file }}" == */configs.xml ]]; then
            VERSION=`sed -n 's|\s*<version>\(.*\)</version>|\1|p' ${{ inputs.version_file }} 2>/dev/null`
          elif [[ "${{ inputs.version_file }}" == */pom.xml ]]; then
            VERSION=`grep '<revision>.*</revision>' ${{ inputs.version_file }} | cut -d '>' -f 2 | cut -d - -f 1`
          elif [[ "${{ inputs.version_file }}" == */*.spectemplate ]]; then
            VERSION=`grep 'Version: ' ${{ inputs.version_file }} | rev | cut -d' ' -f1 | rev`
          elif [[ "${{ inputs.version_file }}" == */.env ]]; then
            VERSION=`sed -e '/\[[2-9][0-9].[0-9][0-9].[0-9]+\]/p' ${{ inputs.version_file }} | cut -d '=' -f 2`
          else
            echo "Unable to parse ${{ inputs.version_file }}"
            exit 1
          fi

          echo "VERSION=$VERSION"

          if egrep '^[2-9][0-9]\.[0-9][0-9]\.[0-9]+' <<<"$VERSION" >/dev/null 2>&1 ; then
            n=${VERSION//[!0-9]/ }
            a=(${n//\./ })
            echo "major_version=${a[0]}.${a[1]}" >> $GITHUB_OUTPUT
            MAJOR=${a[0]}.${a[1]}
            echo "minor_version=${a[2]}" >> $GITHUB_OUTPUT
          else
            echo "Cannot parse version number from ${{ inputs.version_file }}"
            exit 1
          fi

          if [[ -z "$GITHUB_HEAD_REF" ]]; then
            BRANCHNAME="$GITHUB_REF_NAME"
          else
            BRANCHNAME="$GITHUB_HEAD_REF"
          fi

          case "$BRANCHNAME" in
            master | [2-9][0-9].[0-9][0-9].x | release* | hotfix*)
              echo "release=1" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "release=`date +%s`.`echo ${{ github.sha }} | cut -c -7`" >> $GITHUB_OUTPUT
              ;;
          esac

          case "$BRANCHNAME" in
            develop | dev-[2-9][0-9].[0-9][0-9].x)
              STABILITY="unstable"
              ENV="development"
              ;;
            release* | hotfix*)
              STABILITY="testing"
              ENV="testing"
              ;;
            master | [2-9][0-9].[0-9][0-9].x)
              STABILITY="stable"
              ENV="production"
              ;;
            pkgtest-*)
              STABILITY="pkgtest"
              ENV="development"
              ;;
            *)
              STABILITY="canary"
              ENV="development"
              ;;
          esac
          echo "stability=$STABILITY" >> $GITHUB_OUTPUT
          echo "env=$MAJOR-$ENV" >> $GITHUB_OUTPUT

          DOCKERIZE_MATRIX='["alma9"]'
          if [ "${{ github.event_name }}" = "schedule" ]; then
            DOCKERIZE_MATRIX='["alma8","alma9","bullseye"]'
          fi
          echo "dockerize_matrix=$DOCKERIZE_MATRIX" >> $GITHUB_OUTPUT
        shell: bash
